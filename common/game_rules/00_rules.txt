# Tooltips will be generated from these rules when they fail. Use of custom_tooltip is recommended
# There are still multiple hard-coded rules that apply in addition to these.
# If rules here evaluate to true, there might still be other rules that make the action unavailable.
# If a rule here evaluates to false the action will become unavailable

#Root = target country
#This = country
is_valid_rival = {
	custom_tooltip = {
		fail_text = INVALID_RIVAL_DESC
		root = {
			OR = {
				prev = { 
					NOT = { is_country_type = default } 
					NOT = { is_country_type = contender } 
				}
				AND = {
					relative_power = { who = prev value >= inferior }
					relative_power = { who = prev value <= superior }
				}
			}
		}
	}
}


# Root = claimer
# This = system
can_add_claim = {
	hidden_trigger = {
		if = {
			limit = {
				root = { 
					NOT = { is_country_type = default } 
					NOT = { is_country_type = contender } 
				}
			}
			always = yes
		}
	}

	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_POLICY
		OR = {
			root = { has_policy_flag = unrestricted_wars }
			AND = {
				exists = owner
				owner = {
					any_war = {
						any_attacker = { is_same_value = prevprev }
						any_defender = { is_same_value = root }
					}
				}
			}
		}
	}

	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_NOT_VALID_EMPIRE
		NAND = {
			exists = owner
			owner = {
				NOT = { is_country_type = default }
				NOT = { is_country_type = contender } 
			}
		}
	}

	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIMS_WARGOAL
		exists = owner
		owner = {
			NOT = {
				any_war = {
					attacker = { is_same_value = root }
					defender = { is_same_value = prevprev }
					using_war_goal = { type = wg_conquest owner = attacker }
				}
			}
		}
	}
}

# Root = taker country
# This = giver country
can_get_claim_from_lost_system = {
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_NOT_VALID_EMPIRE
		or = {
			is_country_type = default
			is_country_type = contender
		}
		root = {
			or = {
				is_country_type = default
				is_country_type = contender
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM
	}
	# custom_tooltip = {
	# 	fail_text = CANNOT_ADD_CLAIM_PURIFIERS
	# 	NAND = {
	# 		has_valid_civic = civic_fanatic_purifiers
	# 		NOT = {	is_same_species = root }
	# 	}
	# }
}

#Root = country
#This = species
species_has_species_profile_full = {
	has_slavery_type = { type = slavery_none country = root } #has_species_profile = { type = species_profile_full country = root }
}

#Root = country
#This = pop
should_abduct_pop = {
	planet = {
		exists = owner
		owner = { is_hostile = root }
	}
	OR = {
		has_purge_type = { type = purge_matrix country = root }
		has_purge_type = { type = purge_processing country = root }
		has_purge_type = { type = purge_labor_camps country = root }
		has_purge_type = { type = purge_necrophage country = root }
	}
}

#Root = planet
#This = species
species_can_live_on_planet = {
	always = yes
}

#Root = country
#This = pop
can_vote_in_democratic_election = {
	#has_species_profile_full = yes
	is_sapient = yes
	is_enslaved = no
	is_being_purged = no
}

#Checks whether any leaders (scientists etc) can be formed from this pop
#Root = country
#This = pop
can_generate_leader_from_pop = {
	is_enslaved = no #has_species_profile_full = yes
	NOT = { has_trait = trait_syncretic_proles }
	OR = {
		is_robot_pop = no
	}
	OR = {
		is_same_species = root
		root = {
			NAND = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
	}
}

#Checks whether this species is eligible to become rulers through elections
#Root = country
#This = species
can_generate_leader_from_species = {
	is_sapient = yes
	#is_enslaved = no #has_species_profile = { type = species_profile_full country = root }
	NOR = {
		has_species_profile = { type = species_profile_romulan_servant_species country = root }
		has_species_profile = { type = species_profile_cardassian_soft_hand country = root }
		has_species_profile = { type = species_profile_cardassian_hard_hand country = root }
		has_species_profile = { type = species_profile_cardassian_conscripted_slave country = root }
	}
}

#Checks whether this species can become espionage assets (note that some checks are also done in code)
#Root = country
#This = species
can_create_espionage_asset_from_species = {
	always = yes
}

#Root = country
#This = pop
can_generate_military_leader_from_pop = {
	can_be_military_leader = yes
	OR = {
		is_same_species = root
		root = {
			NAND = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
	}
}

#Root = species
#This = country
can_generate_army_from_planet = {
	any_owned_pop = {
		is_same_species = root
		can_be_soldier = yes
	}
}

#Root = planet
#This = country
can_release_vassal = {
	# custom_tooltip = {
	# 	fail_text = default
	# 	NOT = { has_valid_civic = civic_fanatic_purifiers }
	# }
	custom_tooltip = {
		fail_text = default
	}
}

#Root = species
#This = country
can_release_vassal_from_species = {
	root = {
		is_sapient = yes
		NOT = {
			has_trait = trait_hive_mind
		}
	}
}

# Root = species
# This = country
can_generate_army_from_species = {
	root = {
		OR = {
			has_military_service_type = { type = military_service_full country = prev }
			has_military_service_type = { type = military_service_limited country = prev }
		}
	}
}

# Root = species
# This = country
can_modify_species = {
	OR = {
		NOT = { has_trait = trait_self_modified }
		is_same_species = root
	}
}

#This = country, suject
#Root = country, overlord
#From = target solar system
#This rule is a condition for when subjects that normally cannot colonize outside their borders are allowed to
subject_can_expand = {
	always = no
	# root = { has_valid_civic = civic_feudal_realm }
}

#Root = country, attacker
#This = country, target
#This rule is a condition for taking hostile actions towards neutral targets. Such as landing troops or attacking their fleets
can_take_hostile_actions = {
	if = {
		limit = {
			always = no
			ROOT = {
				NOT = { has_policy_flag = first_contact_attack_allowed }
			}
			NOT = {
				is_hostile = ROOT
				has_communications = ROOT
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_FIRST_CONTACT_PROTOCOL"
			always = no
		}
	}
	else_if = {
		limit = {
			AND = {
				NOT = { has_country_flag = hostile_to_nomads }
				ROOT = {
					is_country_type = nomad
				}
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_FIRST_CONTACT_PROTOCOL"
			always = no
		}
	}
	else_if = {
		#attacking primitives with non-interference
		limit = {
			ROOT = {
				or = {
					is_country_type = default
					is_country_type = contender
				}
				OR = {
					has_policy_flag = interference_passive
					has_policy_flag = interference_active
				}
			}
			is_primitive = yes
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_NATIVE_INTERFERENCE"
			# always = no
		}
	}
	else_if = {
		limit = {
			is_primitive = yes
			ROOT = { 
				or = {
					is_country_type = default
					is_country_type = contender
				}
			}
			capital_scope = {
				root = {
					NOT = {
						any_planet_within_border = {
							is_same_value = prevprev
						}
					}
				}
			}
		}
		custom_tooltip = {
			text = ""
			always = no
		}
	}
	else_if = {
		limit = {
			ROOT = { is_subject_type = satrapy }
			is_country_type = faction
			root = {
				any_owned_planet = {
					exists = controller
					controller = {
						is_same_value = prevprevprev
					}
				}
			}
		}
		custom_tooltip = {
			text = ""
			always = yes
		}
	}
	else_if = {
		limit = {
			ROOT = { is_subject_type = satrapy }
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_SATRAPY"
			always = no
		}
	}
	else = {
		always = yes
	}
}

#Root = country, attacker
#This = country, target
#This rule is a condition for declaring war
can_declare_war = {
	custom_tooltip = {
		fail_text = "ACTION_DECLARE_WAR_OVERLORD_ON_SUBJECT"
		NOT = {
			AND = {
				OR = {
					is_subject_type = "vassal"
					is_subject_type = "protectorate"
				}
				overlord = {
					is_same_value = root
				}
			}
		}
	}
	if = {
		limit = {
			exists = root
			ROOT = {
				has_policy_flag = no_wars
				OR = {
					is_subject = no
					overlord = {
						is_same_value = root
					}
				}
			}
		}
		custom_tooltip = {
			text = "CAN_DECLARE_WAR_POLICY"
			always = no
		}
	}
	if = {
		limit = {
			exists = root
			ROOT = {
				is_ai = yes
			}
		}
		ROOT = {
			is_at_war = no
		}
	}

	# HRB_NOTE: avoid wars on Primitives
	ROOT = { is_primitive = no }
	THIS = { is_primitive = no }
}

#Root = country
#This = planet
can_colonize_planet = {
	always = yes
}

#Root = country
#This = planet
can_colonize_outside_borders = {
	always = no
}

#Root = country
#This = planet
can_terraform_planet = {
	NAND = {
		# root = { has_policy_flag = pre_sapients_protect }
		any_owned_pop = { is_sapient = no }
	}
}

#Root = country
#This = pop
can_colonize_with_pop = {
	has_colonization_control = {
		value = no
		country =root
	}
	OR = {
		NOT = { has_trait = trait_self_modified }
		is_same_species = root
	}
	if = {
		limit = {
			is_sapient = no
		}
		custom_tooltip = {
			always = no
		}
	}
	else = {
		always = yes
	}
}

#Root = country
#This = species
can_colonize_with_species = {
	has_colonization_control = {
		value = no
		country =root
	}
	OR = {
		NOT = { has_trait = trait_self_modified }
		is_same_species = root
	}
	if = {
		limit = {
			is_sapient = no
		}
		custom_tooltip = {
			always = no
		}
	}
	else = {
		always = yes
	}
}

# Root = Pop
# From = Country
# This = Pop
# NOTE: species_has_happiness is also checked for this
pop_has_random_ethics = {
	always = yes # Put this cause all questions were removed
}

# Root = Species
# From = Country
# This = Species
species_has_happiness = {
	NOR = {
		has_trait = trait_hive_mind
		NOT = { exists = from }
	}
}

#Root = country, us
#This = country, them
#This rule is a condition for determining if a country is hostile towards another. not to be confused with can_take_hostile_action
can_be_hostile_towards = {
	if = {
		limit = { is_primitive = yes }
		ROOT = {
			NOT = { has_policy_flag = interference_passive }
		}
	}
	else_if = {
		limit = { ROOT = { is_primitive = yes } }
		NOT = { has_policy_flag = interference_passive }
	}
	else_if = {
		limit = { is_country_type = ratlings }
		always = yes
	}
}

# Checks if a pop can procreate
# This = Species
# Root = Planet
can_species_procreate = {
	is_sapient = yes
	NAND = {
		root = { has_modifier = slave_colony }
		has_slavery_type = { type = slavery_none country = root.owner }
	}
	if = {
		limit = {
			has_trait = trait_necrophage
		}
		NOT = {
			root = {
				any_owned_species = {
					species_can_be_necrophaged = yes
				}
			}
		}
	}
}

# Checks if a pop can be assembled
# This = Species
# Root = Planet
can_species_be_assembled = {
	is_sapient = yes
	OR = {
		AND = {
			is_robotic = yes
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_add
					value > 0
				}
			}
		}
		AND = {
			is_organic_species = yes
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_organic_add
					value > 0
				}
			}
		}
	}
}

#This rule is a condition for bombarding planets
#Root = fleet, potential attacker
#From = planet, potential target
@wg_occupation_planet_devastation_cap = 75

can_orbital_bombard = {
	exists = FROM.OWNER
	OR = {
		AND = {
			ROOT.OWNER = {
				NOT = { has_communications = FROM.OWNER }
			}
			FROM.OWNER = {
				NOT = { is_country_type = primitive }
			}
		}
		AND = {
			ROOT.OWNER = {
				NOR = {
					has_policy_flag = interference_passive
					has_policy_flag = interference_active
				}
			}
			FROM.OWNER = { is_country_type = primitive }
		}
		ROOT.OWNER = { is_at_war_with = FROM.CONTROLLER }
		FROM.CONTROLLER = {
			OR = {
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				AND = {
					is_country_type = awakened_marauders
					ROOT.OWNER = { is_hostile = prev }
				}
			}
		}
		ROOT.OWNER = {
			OR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = vol
				AND = {
					is_country_type = awakened_marauders
					FROM.CONTROLLER = { is_hostile = prev }
				}
			}
		}
		AND = {
			from.controller = {
				is_country_type = faction
				NOT = { is_same_value = root.owner }
			}
			from.owner = {
				is_same_value = root.owner
			}
		}
	}
	NAND = {
		FROM = {
			planet_devastation >= @wg_occupation_planet_devastation_cap
		}
		FROM.OWNER = {
			any_war = {
				any_attacker = { is_same_value = ROOT.OWNER }
				any_defender = { is_same_value = FROM.OWNER }
				using_war_goal = { type = wg_occupation owner = ROOT.OWNER }
			}
		}
	}
	NOT = {
		ROOT = {
			is_fleet_orbiting_enemy_planet_with_wg = {
				attacker_war_goal = wg_coup
			}
		}
	}
}

#Check if it is possible to build orbital stations on this planet
#this: planet
#root: country
can_planet_support_orbital_station = {
	custom_tooltip = {
		fail_text = "ORBITAL_STATION_ALREADY_EXISTS"
		has_any_megastructure = no
		NOT = { has_planet_flag = has_megastructure }
	}
}

# Determines if notification messages should be sent after a ground combat
# this: planet
# from: winner
# root: loser
show_notification_for_ground_combat = {
	NOR = {
		has_planet_flag = slave_revolt
		has_planet_flag = revolt_in_progress
	}
}

# HRB_TODO: tradition check
# Determines if the "per_neighbor_rival" static modifier should be applied to an empire
# this: country
should_apply_neighbor_rival_modifier = {
	always = no
	#has_active_tradition = tr_supremacy_great_game
}

#Root: Rebelling against country
#This: Rebel country
are_rebels_hostile = {
	is_country_type = rebel	#Rebels change country type after taking their initial planet (action.30)
}

# Is the given fleet the portal for given extradimensional country
# root: country (ED)
# this: fleet
is_extradimensional_portal = { # is this portal mine
	is_ship_size = dimensional_portal_ed
	OR = {
		owner = { is_same_value = root } # owner is me
		OR = {
			AND = { # portal is unbidden and I am unbidden
				root = { is_country_type = extradimensional }
				any_owned_ship = { has_ship_flag = unbidden_portal }
			}
			AND = { # portal is aberrant and I am aberrant
				root = { is_country_type = extradimensional_2 }
				any_owned_ship = { has_ship_flag = aberrant_portal }
			}
			AND = { # portal is vehement and I am vehement
				root = { is_country_type = extradimensional_3 }
				any_owned_ship = { has_ship_flag = vehement_portal }
			}
		}
	}
}

# Is the given fleet an anchor for given extradimensional country
# root: country (ED)
# this: fleet
is_extradimensional_anchor = {
	root = {
		OR = {
			is_country_type = extradimensional
			is_country_type = extradimensional_2
			is_country_type = extradimensional_3
		}
	}
	any_owned_ship = { is_ship_size = starbase_exd }
	owner = { is_same_value = root }
}

# Can the country have robot pop
# root: country
can_have_robot_pops = {
	exists = this
	always = no
	# NOT = { has_authority = auth_hive_mind }
}

# Can purge/disassembly be individually stopped by owner
# scope: pop
can_stop_purge_pop_manually = {
	custom_tooltip = {
		fail_text = "ENTIRE_SPECIES_BEING_PURGED"
		NOT = { has_purge_type = { type = purge_none } }
	}
}

# Can the pop be purged/disassembled individually by its owner
# scope: pop
can_purge_pop_manually = {
	custom_tooltip = {
		fail_text = "ALREADY_BEING_PURGED"
		NOT = { has_purge_type = { type = purge_none } }
	}
	custom_tooltip = {
		fail_text = "ACTION_CANNOT_PURGE_CITIZEN"
		exists = owner
		OR = {
			is_robot_pop = yes
			is_sapient = no
			# owner = { has_authority = auth_hive_mind }
			NOT = { has_slavery_type = { type = slavery_none } }
			always = no
		}
	}
	custom_tooltip = {
		fail_text = "ACTION_CANNOT_PURGE_POLICY"
		exists = owner
		OR = {
			is_robot_pop = yes
			AND = {
				is_sapient = no
				# owner = { NOT = { has_policy_flag = pre_sapients_protect } }
			}
			owner = { has_policy_flag = purge_allowed }
		}
	}
}

# THIS = Fleet
fleet_uses_templates = {
	is_ship_class = shipclass_military
	is_designable = yes
}

# this = starbase, megastructure or planet
can_orbitable_repair_ships = {
	OR = {
		AND = {
			is_scope_type = starbase
			has_starbase_size >= starbase_starport
			fleet = {
				is_disabled = no
			}
		}
		# AND = {
		# 	is_scope_type = megastructure
		# 	OR = {
		# 		is_megastructure_type = mega_shipyard_1
		# 		is_megastructure_type = mega_shipyard_2
		# 		is_megastructure_type = mega_shipyard_3
		# 	}
		# }
	}
}

# this = ship
# root = country that kills ship
can_spawn_debris = {
	root = { 
		or = {
			is_country_type = default
			is_country_type = contender
		}
	}
	exists = owner
	# owner = { NOT = { has_ascension_perk = ap_enigmatic_engineering } }
}

# this = system
# root = country
# Determines if AI-controlled empires should restrict (and thus avoid) a system
# Used by regular empires & crises
ai_should_restrict_system = {
	OR = {
		AND = {
			root = {
				is_crisis_faction = yes
			}
			has_star_flag = guardian
			any_fleet_in_system = {
				exists = owner
				owner = {
					is_country_type = guardian_fortress
				}
			}
		}
	}
}

# this = country
can_subjugate_empires = {
	always = yes
}

# THIS = Fleet
can_jump_drive = {
	always = yes	# Moved cooldown to code
}

# this = country
can_spawn_occupation_armies = {
	or = {
		is_country_type = default
		is_country_type = contender
	}
}

# this = system
# root = country
system_blocks_sensors = {
	OR = {
		is_inside_nebula = yes
		has_modifier = space_storm
		has_star_flag = sealed_system
	}
}

# Root = country attempting to target system for movement
# This = system being targeted
can_enter_system_by_jump = {
	custom_tooltip = {
#		success_text = "debug: can jump"
		fail_text = cannot_jump_to_system

		# Sealed system
		OR = {
			NOT = { has_star_flag = sealed_system }
			AND = {
				root = { has_country_flag = entered_sealed_system }
				has_star_flag = sealed_system
			}
		}
	}
}


# This = pop
can_resettle_pop = {
	# Self-modified Pops won't leave
	custom_tooltip = {
		fail_text = "self_modified_refuse"
		NOT = { has_trait = trait_self_modified }
	}

	# Done as an IF/ELSE so the tooltip isn't hideous and unreadable
	if = {
		limit = {
			planet = {
				OR = {
					has_modifier = doomsday_1
					has_modifier = doomsday_2
					has_modifier = doomsday_3
					has_modifier = doomsday_4
					has_modifier = doomsday_5
				}
			}
		}
		always = yes
	}
	else_if = {
		limit = {
			planet = {
				has_modifier = planet_culture_shock
			}
		}
		OR = {
			is_same_species = planet.owner
			planet = {
				NOT = { has_modifier = planet_culture_shock }
			}
		}
	}
	else = {
		custom_tooltip = {
			fail_text = RESETTLEMENT_POLICY_FAIL
			owner = {
				has_policy_flag = resettlement_allowed
			}
		}
	}
}

can_country_resettle = {
	has_policy_flag = resettlement_allowed
}

# This = Planet
can_resettle_planet = {
	owner = {
		has_policy_flag = resettlement_allowed
	}
	is_controlled_by = owner
	has_ground_combat = no
	has_orbital_bombardment = no
	custom_tooltip = {
		fail_text = RESETTLE_PLANET_UNDER_COLONIZATION
		exists = this
		is_under_colonization = no
	}
	custom_tooltip = {
		fail_text = RESETTLE_PLANET_DISABLED_ROMULAN
		exists = this
		NOT = { has_planet_flag = resettlement_disabled }
	}
}

can_resettle_planet_no_owner_check = {
	is_controlled_by = owner
	has_ground_combat = no
	has_orbital_bombardment = no
	custom_tooltip = {
		fail_text = RESETTLE_PLANET_UNDER_COLONIZATION
		exists = this
		is_under_colonization = no
	}
	custom_tooltip = {
		fail_text = RESETTLE_PLANET_DISABLED_ROMULAN
		exists = this
		NOT = { has_planet_flag = resettlement_disabled }
	}
}

# This = Planet
should_spawn_deposits = {
	is_artificial = no
}

# This = Planet
is_new_colony = {
	has_building = building_colony_shelter
}

# This = pop
pop_generates_crime = {
	is_sapient = yes
	is_being_assimilated = no
}

# This = planet
can_pops_grow_on_planet = {
	NOR = {
		AND = { # conquered by crisis
			exists = controller
			controller = {
				OR = {
					is_country_type = ai_empire
					is_country_type = swarm
				}
			}
		}
	}
}

# This = planet
can_pops_assemble_on_planet = {
	NOR = {
		has_modifier = planet_robot_assembly_control
		AND = { # conquered by crisis
			exists = controller
			controller = {
				OR = {
					is_country_type = ai_empire
					is_country_type = swarm
				}
			}
		}
	}
}

# This = planet
can_pops_decline_on_planet = {
	always = yes
}

# This = planet
# Root = country
can_force_grow_on_planet = {
	exists = owner
}

# This = planet
# Root = country
can_force_decline_on_planet = {
	exists = owner
	custom_tooltip = {
		fail_text = FORCED_DECLINE_ALREADY_PURGING
		NOT = {
			any_owned_pop = {
				NOR = {
					has_purge_type = { country = from type = purge_none }
					has_purge_type = { country = from type = purge_neutering }
				}
			}
		}
	}
}

# This = species
# Root = country
can_force_decline_species = {
	NOT = { has_slavery_type = { type = slavery_none country = root } }
}

# This = country
can_build_branch_offices = {
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_MEGACORP
		OR = {
			has_authority = auth_corporate
			has_civic = civic_galactic_sovereign_megacorp
		}
	}
}

# This = country
can_support_branch_offices = {
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_ON_MEGACORP_PLANET
		NOR = {
			has_authority = auth_corporate
			has_civic = civic_galactic_sovereign_megacorp
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_REGULAR_EMPIRE
		is_regular_empire = yes
	}
}

# This = planet
# Root = country
can_build_branch_office_on_planet = {
	custom_tooltip = {
		fail_text = requires_recipient_not_fanatic_purifiers
		exists = owner
		# owner = {
		# 	OR = {
		# 		is_same_species = root
		# 		NOT = { has_civic = civic_fanatic_purifiers }
		# 	}
		# }
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_COMMERCIAL_PACT
		exists = owner
		OR = {
			owner = { has_commercial_pact = root }
			owner = { is_in_federation_with = root }

			# allow branch offices in subsidiaries and vice versa
			root = {
				is_subject = yes
				is_subject_type = subsidiary
				overlord = { is_same_value = owner }
			}
			owner = {
				is_subject = yes
				is_subject_type = subsidiary
				overlord = { is_same_value = root }
			}
			AND = {
				root = { has_civic = civic_galactic_sovereign_megacorp }
				owner = { is_galactic_community_member = yes }
			}
			AND = {
				root = { has_modifier = imperial_charter }
				owner = { is_galactic_community_member = yes }
			}
		}
	}
}

# This = planet
can_crossbreed_species_on_planet = {
	always = no
	exists = owner
	# owner = { has_ascension_perk = ap_xeno_compatibility }
	count_species = {
		limit = {
			is_crossbreeding_possible = yes
		}
		count >= 2
	}
}

# This = species one
# Root = species two
can_crossbreed_species = {
	is_crossbreeding_possible = yes
	root = { is_crossbreeding_possible = yes }
	NOR = {
		is_subspecies = root
		root = { is_subspecies = prev }
	}
}

# No scope
can_win_timed_victory = {
	custom_tooltip = {
		fail_text = VICTORY_CONDITION_CRISIS_IN_PROGRESS
		NOT = {
			any_country = {
				is_crisis_faction = yes
				NOT = { is_country_type = awakened_marauders }
			}
		}
	}
}

# This = country
can_use_galactic_market = {
	or = {
		is_country_type = default
		is_country_type = contender
	}
	# NOT = {
	# 	has_civic = civic_fanatic_purifiers
	# }
}

# ROOT = country
# THIS = pop
can_be_sold_on_slave_market = {
	exists = owner
	
	is_enslaved = yes
	OR = {
		ROOT = { is_ai = no }
		is_enslaved = yes #has_species_profile_full = no
		AND = {
			is_unemployed = yes
			planet = {
				count_owned_pop = {
					count > 3
					limit = { is_unemployed = yes }
				}
			}
		}
	}
	if = {
		limit = {
			has_global_flag = organic_slave_trade_banned_flag
		}
		is_organic_species = no
	}
	if = {
		limit = {
			has_global_flag = sentient_slave_trade_banned_flag
		}
		is_sapient = no
	}
}

# This = country
can_be_part_of_galactic_community = {
	custom_tooltip = {
		fail_text = "community_default_failtext"
		or = {
			is_country_type = default
			is_country_type = contender
		}
	}
	# custom_tooltip = {
	# 	fail_text = "community_homicidal_failtext"
	# 	NOT = {
	# 		has_civic = civic_fanatic_purifiers
	# 	}
	# }
	custom_tooltip = {
		fail_text = "community_declared_crisis_failtext"
		has_been_declared_crisis = no
	}
	custom_tooltip = {
		fail_text = "community_declared_crisis_failtext"
		#fail_text = "community_overlord_declared_crisis_failtext"
		OR = {
			NOT = { exists = overlord }
			overlord = { has_been_declared_crisis = no }
		}
	}
}

# This = country
can_be_part_of_galactic_empire = {
	custom_tooltip = {
		fail_text = "community_default_failtext"
		or = {
			is_country_type = default
			is_country_type = contender
		}
	}
	# custom_tooltip = {
	# 	fail_text = "community_homicidal_failtext"
	# 	NOT = {
	# 		has_civic = civic_fanatic_purifiers
	# 	}
	# }
	custom_tooltip = {
		fail_text = "community_declared_crisis_failtext"
		has_been_declared_crisis = no
	}
	custom_tooltip = {
		fail_text = "community_declared_crisis_failtext"
		#fail_text = "community_overlord_declared_crisis_failtext"
		OR = {
			NOT = { exists = overlord }
			overlord = { has_been_declared_crisis = no }
		}
	}
}

# This = country
can_see_galactic_community = {
	OR = {
		has_country_flag = galcom_form_aye
		has_country_flag = galcom_form_nay
		is_galactic_community_member = yes
	}
}

# This = country
can_be_part_of_galactic_council = {
	or = {
		is_country_type = default
		is_country_type = contender
	}
	# NOT = {
	# 	has_civic = civic_fanatic_purifiers
	# }
}

# If, 'yes', forces an empire to be advanced at game start (overrides game settings)
# This = country
must_be_advanced_empire = {
	has_country_flag = lost_colony_parent
}

# If 'no', blocks an empire from being advanced at game start (overrides 'must_be_advanced_empire' above)
# This = country
is_allowed_to_be_advanced_empire = {
	always = yes
}

# This = planet
has_enough_pops_for_necrophage_on_planet = {
	owner = { has_origin = origin_necrophage }
	#has_available_jobs = necro_apprentice
	if = {
		limit = {
			has_planet_flag = necrophage_alert_timer
		}
		count_owned_pop = {
			count = 0
			limit = {
				species = { species_can_be_necrophaged = yes }
			}
		}
	}
	# else = {
	# 	NOT = { any_owned_pop = { can_work_specific_job = necro_apprentice } }
	# }
}

# Root = current planet
# This = pop
# Purge, Sapience, Migration Controls policy (ignored by Gestalts and Synths), and target habitability are checked in code.
can_pop_auto_migrate = {
	is_unemployed = yes
	is_being_assimilated = no
	is_enslaved = no
}

# This = planet
# Checked before can_pop_auto_migrate to save performance
can_planet_auto_migrate = {
	NOT = { has_modifier = planet_culture_shock }
	OR = {
		AND = {
			is_colony = yes
			colony_age > 60
		}
		is_capital = yes # Don't break Doomsday!
	}
}

can_planet_receive_auto_migration = {
	NOR = {
		planet_devastation >= 10
		has_modifier = planet_culture_shock
		has_modifier = doomsday_1
		has_modifier = doomsday_2
		has_modifier = doomsday_3
		has_modifier = doomsday_4
		has_modifier = doomsday_5
	}
}

# This = country contacting
# From = target country
## Final check for whether there should be a first contact site spawned. Main check is via country type contact_rule, in code.
can_have_first_contact = {
	if = {
		limit = { from = { is_amoeba_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = { is_amoeba_country_type = yes }
			}
		}
	}
	else_if = {
		limit = { from = { is_tiyanki_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = { is_tiyanki_country_type = yes }
			}
		}
	}
	else_if = {
		limit = { from = { is_crystal_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = {
					is_crystal_country_type = yes
					NOT = { has_country_flag = queued_to_destroy }
				}
			}
		}
	}
	else_if = {
		limit = { from = { is_drone_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = {
					is_drone_country_type = yes
					NOT = { has_country_flag = queued_to_destroy }
				}
			}
		}
	}
	else_if = {
		limit = { from = { is_country_type = cloud } }
		NOT = {
			any_active_first_contact = {
				contact_country = { is_country_type = cloud }
			}
		}
	}
	else_if = {
		limit = {
			from = {
				OR = {
					is_country_type = caravaneer_fleet
					is_country_type = caravaneer_home
				}
			}
		}
		NOT = {
			any_active_first_contact = {
				contact_country = {
					OR = {
						is_country_type = caravaneer_fleet
						is_country_type = caravaneer_home
					}
				}
			}
		}
	}
}

# Root = Country with envoys to send
# This = Imperium leader country
can_use_envoys_to_raise_imperial_authority = {
	always = yes
}

# Root = Country with envoys to send
# This = Imperium leader country
can_use_envoys_to_lower_imperial_authority = {
	custom_tooltip = {
		fail_text = cannot_lower_authority_emperor
		root = { is_galactic_emperor = no }
	}
	custom_tooltip = {
		fail_text = cannot_lower_authority_espionage_operation
		root = {
			NOT = { has_modifier = undermining_efforts_stalled }
		}
	}
}

# Checks whether the game should try and build a building or district on a planet via scripts in common/colony_automation
# Does not apply to "crisis building" (colony_automation_exceptions) or sector automation (sector_focuses)
# this = planet
should_planetary_automate = {
	OR = {
		free_jobs < 3
		num_unemployed > 0
	}
	has_building_construction = no
}